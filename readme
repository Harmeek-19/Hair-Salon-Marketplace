# Hair Salon Management System API

## Table of Contents
1. [Project Overview](#project-overview)
2. [Technology Stack](#technology-stack)
3. [Project Structure](#project-structure)
4. [Setup and Installation](#setup-and-installation)
5. [Database Configuration](#database-configuration)
6. [Environment Variables](#environment-variables)
7. [Running the Server](#running-the-server)
8. [API Endpoints](#api-endpoints)
9. [Authentication](#authentication)
10. [Models](#models)
11. [Permissions](#permissions)
12. [Search Functionality](#search-functionality)
13. [Geolocation Features](#geolocation-features)
14. [Email Notifications](#email-notifications)
15. [Admin Dashboard](#admin-dashboard)
16. [Testing](#testing)
17. [Deployment](#deployment)
18. [Contributing](#contributing)
19. [Troubleshooting](#troubleshooting)
20. [License](#license)

## Project Overview
This project is a comprehensive backend API for a Hair Salon Management System. It provides functionality for managing salons, stylists, appointments, services, and user accounts. The system includes features such as geolocation-based salon search, appointment booking, review system, and an admin dashboard.

## Technology Stack
- Python 3.8+
- Django 5.0.7
- Django REST Framework
- PostgreSQL (for production)
- SQLite (for development)
- JWT for authentication

## Project Structure
```
hairsalon_backend/
│
├── api/
│   ├── migrations/
│   ├── management/
│   │   └── commands/
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   ├── urls.py
│   └── permissions.py
│
├── authentication/
│   ├── migrations/
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   └── urls.py
│
├── booking/
│   ├── migrations/
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   └── urls.py
│
├── content/
│   ├── migrations/
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   └── urls.py
│
├── coupons/
│   ├── migrations/
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   └── urls.py
│
├── dashboard/
│   ├── migrations/
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   └── urls.py
│
├── notifications/
│   ├── migrations/
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   └── urls.py
│
├── hairsalon_backend/
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
│
├── manage.py
├── requirements.txt
└── README.md
```

## Setup and Installation
1. Clone the repository:
   ```
   git clone https://github.com/your-username/hairsalon-backend.git
   cd hairsalon-backend
   ```

2. Create a virtual environment:
   ```
   python -m venv venv
   source venv/bin/activate  # On Windows use `venv\Scripts\activate`
   ```

3. Install dependencies:
   ```
   pip install -r requirements.txt
   For windows an issue might arise with the gdal library which can be solved by using this command:
   #this is the method that's working
   # curl -L -o GDAL-312-amd64 https://github.com/cgohlke/geospatial-wheels/releases/download/v2024.2.18/GDAL-3.8.4-cp312-cp312-win_amd64.whl 
   # pip install GDAL-3.8.4-cp312-cp312-win_amd64.whl)
   ```

4. Run migrations:
   ```
   python manage.py makemigrations
   python manage.py migrate
   ```

5. Create a superuser:
   ```
   python manage.py createsuperuser
   ```

## Database Configuration
The project uses SQLite for development. For production, it's recommended to use PostgreSQL. To configure PostgreSQL:

1. Install PostgreSQL and create a database
2. Update `DATABASES` in `settings.py`:
   ```python
   DATABASES = {
       'default': {
           'ENGINE': 'django.db.backends.postgresql',
           'NAME': 'your_db_name',
           'USER': 'your_db_user',
           'PASSWORD': 'your_db_password',
           'HOST': 'localhost',
           'PORT': '5432',
       }
   }
   ```

## Environment Variables
Create a `.env` file in the project root and add the following:
```
SECRET_KEY=your_secret_key
DEBUG=True
DATABASE_URL=postgres://user:password@localhost/dbname
EMAIL_HOST=smtp.gmail.com
EMAIL_HOST_USER=your_email@gmail.com
EMAIL_HOST_PASSWORD=your_email_password
```

## Running the Server
```
python manage.py runserver
```

## API Endpoints
Detailed list of all API endpoints, their methods, and brief descriptions.

### Authentication
- Register: `POST /auth/register/`
- Login: `POST /auth/token/`
- Refresh Token: `POST /auth/token/refresh/`
- Password Reset: `POST /auth/password_reset/`
- Password Reset Confirm: `POST /auth/password_reset_confirm/<uidb64>/<token>/`

### Salons
- List/Create: `GET/POST /api/salons/`
- Retrieve/Update/Delete: `GET/PUT/PATCH/DELETE /api/salons/<id>/`
- Top Rated: `GET /api/salons/top-rated/`
- Nearby: `GET /api/salons/nearby/?lat=<latitude>&lon=<longitude>`
- Analytics: `GET /api/salons/<id>/analytics/`

### Stylists
- List/Create: `GET/POST /api/stylists/`
- Retrieve/Update/Delete: `GET/PUT/PATCH/DELETE /api/stylists/<id>/`
- Appointments: `GET /api/stylists/<id>/appointments/`
- Available Slots: `GET /api/stylists/<id>/available_slots/?date=<date>`

### Services
- List/Create: `GET/POST /api/services/`
- Retrieve/Update/Delete: `GET/PUT/PATCH/DELETE /api/services/<id>/`

### Appointments
- List/Create: `GET/POST /api/appointments/`
- Retrieve/Update/Delete: `GET/PUT/PATCH/DELETE /api/appointments/<id>/`
- Confirm: `POST /api/appointments/<id>/confirm/`
- Cancel: `POST /api/appointments/<id>/cancel/`

### Reviews
- List/Create: `GET/POST /api/reviews/`
- Retrieve/Update/Delete: `GET/PUT/PATCH/DELETE /api/reviews/<id>/`

### Blogs
- List/Create: `GET/POST /api/blogs/`
- Retrieve/Update/Delete: `GET/PUT/PATCH/DELETE /api/blogs/<id>/`

### Coupons
- List/Create: `GET/POST /api/coupons/`
- Retrieve/Update/Delete: `GET/PUT/PATCH/DELETE /api/coupons/<id>/`

### Reports
- Salon Report: `GET /api/reports/salon_report/`
- Stylist Report: `GET /api/reports/stylist_report/`
- Appointment Report: `GET /api/reports/appointment_report/`

## Authentication
The project uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:
```
Authorization: Bearer <your_token>
```

## Models
Brief description of main models (Salon, Stylist, Service, Appointment, User, etc.)

## Permissions
Explanation of custom permissions (IsSalonOwner, IsAdminUser, etc.)

## Search Functionality
Details on how the search feature works across different models.

## Geolocation Features
Explanation of how nearby salon search works.

## Email Notifications
Description of when and how email notifications are sent.

## Admin Dashboard
Overview of the admin dashboard features.

## Testing
Instructions for running tests:

python manage.py test


## Deployment
Guidelines for deploying to production (e.g., using Heroku, AWS, etc.)

## Contributing
1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## Troubleshooting
Common issues and their solutions.

## License
This project is licensed under the MIT License.